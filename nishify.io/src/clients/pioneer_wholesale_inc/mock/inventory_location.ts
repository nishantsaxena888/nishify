export const inventory_location = {
  options: () => ["id", "name", "address"],
  get: () => [{"id": 1, "name": "Warehouse A"}],
  getOne: (id) => (Array.isArray([{"id": 1, "name": "Warehouse A"}]) && [{"id": 1, "name": "Warehouse A"}].length ? [{"id": 1, "name": "Warehouse A"}][0] : {}),
  post: (payload) => ({ ...payload, id: Math.floor(Math.random() * 10000) }),
  update: (payload) => payload,
};
// Auto-generated by code_generator.py â€” per-entity mock options
// entity: inventory_location

export async function options() {
  return {
  "entity": "inventory_location",
  "primary_key": "id",
  "fields": [
    {
      "name": "id",
      "type": "int",
      "label": null,
      "required": false,
      "read_only": false,
      "nullable": true,
      "primary_key": true,
      "foreign_key": null,
      "default": null
    },
    {
      "name": "address",
      "type": "str",
      "label": null,
      "required": false,
      "read_only": false,
      "nullable": true,
      "primary_key": false,
      "foreign_key": null,
      "default": null
    },
    {
      "name": "name",
      "type": "str",
      "label": null,
      "required": false,
      "read_only": false,
      "nullable": true,
      "primary_key": false,
      "foreign_key": null,
      "default": null
    }
  ],
  "admin": {
    "table": {
      "delete_confirmation": true,
      "inline_edit": false,
      "show_filters": true,
      "page_size": 20,
      "global_search": true,
      "column_search": false,
      "sortable": true,
      "sticky_header": false
    },
    "form": null,
    "list": null
  }
}
}
